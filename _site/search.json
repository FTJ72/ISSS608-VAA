[
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "",
    "text": "This take-home exercise is meant to be a practice of peer review. The task is to critique a submission made by a classmate by giving comments on its clarity and aesthetics. The design is then to be remade using the comments made in order to create a new graph that addresses the concerns raised."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#academic-performance",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#academic-performance",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3.1: Academic Performance",
    "text": "3.1: Academic Performance\nThe current version of the graph shows academic performance as seen below.\n\nMathematicsReadingScience\n\n\n\n\nShow code\nggplot(data=stu_qqq_eda, \n       aes(x=Math_Score)) +\n  geom_histogram(color= \"grey10\",\n           fill= '#ADD0B3') +\n  labs(x = \"Math Scores\",\n       y =\"Number of Students\",\n       title= \"Distribution of Student Math Scores\") +\n  geom_vline(aes(xintercept=median(stu_qqq_eda$Math_Score, na.rm = T)), \n             color=\"#FFFFFF\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=675, \n           y=60, \n          label= paste(\"Median =\", round(median(stu_qqq_eda$Math_Score, na.rm = T), 3)), \n           color= \"white\", \n           size=4,\n           ) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$Math_Score, na.rm = T)),\n             colour=\"black\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=495,\n           y=50,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$Math_Score, na.rm = T), 3)),\n           color=\"black\",\n           size=4) +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nggplot(data=stu_qqq_eda, \n       aes(x=Reading_Score)) +\n  geom_histogram(color= \"grey10\",\n           fill= '#ADD0B3') +\n  labs(x= \"Reading Scores\",\n       y=\"Number of Students\",\n       title= \"Distribution of Student Reading Scores\") +\n  geom_vline(aes(xintercept=median(stu_qqq_eda$Reading_Score, na.rm = T)), \n             color=\"#FFFFFF\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=650, \n           y=60, \n           label= paste(\"Median =\", round(median(stu_qqq_eda$Reading_Score, na.rm = T), 3)), \n           color= \"#FFFFFF\", \n           size=4) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$Reading_Score, na.rm = T)),\n             colour=\"black\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=460,\n           y=50,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$Reading_Score, na.rm = T), 3)),\n           color=\"black\",\n           size=4) +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nggplot(data=stu_qqq_eda, \n       aes(x=Science_Score)) +\n  geom_histogram(color= \"grey10\",\n           fill= '#ADD0B3') +\n  labs(x= \"Science Scores\",\n       y=\"Number of Students\",\n       title= \"Distribution of Student Science Scores\") +\n  geom_vline(aes(xintercept=median(stu_qqq_eda$Science_Score, na.rm = T)), \n             color=\"#FFFFFF\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=659, \n           y=60, \n           label= paste(\"Median =\", round(median(stu_qqq_eda$Science_Score, na.rm = T), 3)), \n           color= \"#FFFFFF\", \n           size=4) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$Science_Score, na.rm = T)),\n             colour=\"black\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=480,\n           y=50,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$Science_Score, na.rm = T), 3)),\n           color=\"black\",\n           size=4) +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCritique\nClarity:\n\nPer graph, the bin width is not set to a specific value. This makes it difficult to understand the ranges within each of the bars of the histogram. In addition, the true shape of the data cannot be seen in this style and is heavily influenced by the number of bins available.\nGiven that 3 different items are being observed (Mathematics, Reading, and Science), the scale of the x and y axes should be consistent between each graph in order to more clearly see differences between each subject in terms of student performance.\n\nAesthetics:\n\nThe label for the mean is being obscured by the black lines of the histogram. It can be moved higher in the graph to prevent the lines from obscuring the letters.\nMedian being written in white makes it difficult to read, changing it to a darker color could help it be more readable to viewers.\nThe gray background contrasts with the white background of the website.\n\n\n\nRecreation\n\nMathematicsReadingScience\n\n\n\n\nShow code\nggplot(data=stu_qqq_eda, \n       aes(x=Math_Score)) +\n  geom_histogram(binwidth = 20,\n                 color= \"grey10\",\n           fill= '#ADD0B3') +\n  labs(x = \"Math Scores\",\n       y =\"Number of Students\",\n       title= \"Distribution of Student Math Scores\") +\n  geom_vline(aes(xintercept=median(stu_qqq_eda$Math_Score, na.rm = T)), \n             color=\"#008000\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=700, \n           y=550, \n          label= paste(\"Median =\", round(median(stu_qqq_eda$Math_Score, na.rm = T), 3)), \n           color= \"#008000\", \n           size=4,\n           ) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$Math_Score, na.rm = T)),\n             colour=\"black\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=450,\n           y=550,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$Math_Score, na.rm = T), 3)),\n           color=\"black\",\n           size=4) +\n  theme_hc() +\n  scale_x_continuous(breaks = seq(100, 1000, 100)) +\n  scale_y_continuous(breaks = seq(0, 550, 100)) +\n  coord_cartesian(xlim = c(100, 1000), ylim = c(0, 550))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nggplot(data=stu_qqq_eda, \n       aes(x=Reading_Score)) +\n  geom_histogram(binwidth = 20,,\n                 color= \"grey10\",\n           fill= '#ADD0B3') +\n  labs(x= \"Reading Scores\",\n       y=\"Number of Students\",\n       title= \"Distribution of Student Reading Scores\") +\n  geom_vline(aes(xintercept=median(stu_qqq_eda$Reading_Score, na.rm = T)), \n             color=\"#008000\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=680, \n           y=550, \n           label= paste(\"Median =\", round(median(stu_qqq_eda$Reading_Score, na.rm = T), 3)), \n           color= \"#008000\", \n           size=4) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$Reading_Score, na.rm = T)),\n             colour=\"black\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=430,\n           y=550,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$Reading_Score, na.rm = T), 3)),\n           color=\"black\",\n           size=4) +\n  theme_hc() +\n  scale_x_continuous(breaks = seq(100, 1000, 100)) +\n  scale_y_continuous(breaks = seq(0, 550, 100)) +\n  coord_cartesian(xlim = c(100, 1000), ylim = c(0, 550))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nggplot(data=stu_qqq_eda, \n       aes(x=Science_Score)) +\n  geom_histogram(binwidth = 20,,\n                 color= \"grey10\",\n           fill= '#ADD0B3') +\n  labs(x= \"Science Scores\",\n       y=\"Number of Students\",\n       title= \"Distribution of Student Science Scores\") +\n  geom_vline(aes(xintercept=median(stu_qqq_eda$Science_Score, na.rm = T)), \n             color=\"#008000\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=700, \n           y=550, \n           label= paste(\"Median =\", round(median(stu_qqq_eda$Science_Score, na.rm = T), 3)), \n           color= \"#008000\", \n           size=4) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$Science_Score, na.rm = T)),\n             colour=\"black\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=450,\n           y=550,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$Science_Score, na.rm = T), 3)),\n           color=\"black\",\n           size=4) +\n  theme_hc() +\n  scale_x_continuous(breaks = seq(100, 1000, 100)) +\n  scale_y_continuous(breaks = seq(0, 550, 100)) +\n  coord_cartesian(xlim = c(100, 1000), ylim = c(0, 550))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChanges\nClarity:\n\nA fixed bin size of 20 was set for all graphs. This is to ensure that the bins per graph are uniform for easier interpretation by viewers.\nThe size of the x axis was set to 100-1000 based off of the lowest and highest values found in all of the datasets. This allows the bins to be consistent in the numbers that they represent and for the differences between each subject’s scores to be more evident.\nThe y axis was changed to a scale of 0-550 based off of the highest frequency found in the dataset per bin.\n\nAesthetics:\n\nThe label for the mean was moved higher to no longer be obscured by the graph.\nThe color of the median was changed into a dark green color to better match the color theme of the website.\nThe gray background has been switched to a white background."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-average-score-per-school",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-average-score-per-school",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3.1: Distribution of Average Score per School",
    "text": "3.1: Distribution of Average Score per School\nThe next graph to observe is that of the box plot representing the distribution of the average scores of the students within each school per subject.\n\n\nShow code\nstu_sch &lt;- stu_qqq_eda %&gt;%\n  group_by(School_ID) %&gt;%\n  mutate(math_avg = mean(Math_Score),\n         science_avg = mean(Science_Score),\n         reading_avg = mean(Reading_Score)) %&gt;%\n  select(School_ID, math_avg, science_avg, reading_avg) %&gt;%\n  unique() \n\nsch_math &lt;- ggplot(data=stu_sch,\n       aes(y = math_avg)) +\n  geom_boxplot(width=0.1, outlier.colour = \"#137a63\") +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",\n               shape = 18,\n               colour = \"#ADD0B3\", \n               size = 3.5) +\n  xlim(c(-.1,.1))+\n  scale_x_continuous(NULL, breaks = NULL) +\n  labs(y = \"Math Average\", title = \"\")\n\nsch_read &lt;- ggplot(data=stu_sch,\n       aes(y = reading_avg)) +\n  geom_boxplot(width=0.1, outlier.colour = \"#137a63\") +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\", \n               shape = 18,\n               colour = \"#ADD0B3\", \n               size = 3.5) +\n  xlim(c(-.1,.1))+\n  scale_x_continuous(NULL, breaks = NULL) +\n  labs(y = \"Reading Average\", title = \"\")\n\nsch_sci &lt;- ggplot(data=stu_sch,\n       aes(y = science_avg)) +\n  geom_boxplot(width=0.1, outlier.colour = \"#137a63\") +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",  \n               shape = 18,\n               colour = \"#ADD0B3\", \n               size = 3.5) +\n  xlim(c(-.1,.1)) +\n  scale_x_continuous(NULL, breaks = NULL) +\n  labs(y = \"Science Average\", title = \"\")\n\nsch_math + sch_read + sch_sci\n\n\n\n\n\n\n\n\n\n\nCritique\nClarity\n\nSimilar to the previous graph, given that 3 different subjects are being compared, keeping a similar scale between all the graphs could help in seeing which subjects have the greatest disparities between one another in terms of average student grades.\nThe y-axis label could be improved by specifying that the measurement is per school.\n\nAesthetics\n\nThe diamond to represent the mean of the data could be darkened to help its visibility to the reader.\nSimilar to the previous graph, the gray background could be switched to match the white background of the website itself.\n\n\n\nRecreation\n\n\nShow code\nstu_sch &lt;- stu_qqq_eda %&gt;%\n  group_by(School_ID) %&gt;%\n  mutate(math_avg = mean(Math_Score),\n         science_avg = mean(Science_Score),\n         reading_avg = mean(Reading_Score)) %&gt;%\n  select(School_ID, math_avg, science_avg, reading_avg) %&gt;%\n  unique() \n\nsch_math &lt;- ggplot(data=stu_sch,\n       aes(y = math_avg)) +\n  geom_boxplot(width=0.1, outlier.colour = \"#137a63\") +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",\n               shape = 18,\n               colour = \"#137a63\", \n               size = 3.5) +\n  xlim(c(-.1,.1))+\n  scale_x_continuous(NULL, breaks = NULL) +\n  labs(y = \"Average Student Math Score of School\", title = \"\")+\n  coord_cartesian(ylim = c(300, 750))+\n  theme_hc() \n\nsch_read &lt;- ggplot(data=stu_sch,\n       aes(y = reading_avg)) +\n  geom_boxplot(width=0.1, outlier.colour = \"#137a63\") +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\", \n               shape = 18,\n               colour = \"#137a63\", \n               size = 3.5) +\n  xlim(c(-.1,.1))+\n  scale_x_continuous(NULL, breaks = NULL) +\n  labs(y = \"Average Student Reading Score of School\", title = \"\")+\n  coord_cartesian(ylim = c(300, 750))+\n  theme_hc() \n\nsch_sci &lt;- ggplot(data=stu_sch,\n       aes(y = science_avg)) +\n  geom_boxplot(width=0.1, outlier.colour = \"#137a63\") +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",  \n               shape = 18,\n               colour = \"#137a63\", \n               size = 3.5) +\n  xlim(c(-.1,.1)) +\n  scale_x_continuous(NULL, breaks = NULL) +\n  labs(y = \"Average Student Science Score of School\", title = \"\")+\n  coord_cartesian(ylim = c(300, 750))+\n  theme_hc() \n\nsch_math + sch_read + sch_sci\n\n\n\n\n\n\n\n\n\n\n\nChanges\nClarity\n\nThe x and y scales were adjusted to be uniform and based on the highest and lowest values found for each axis from the data.\nThe y-axis label clarifies that the score is per school.\n\nAesthetics\n\nThe diamond to represent the mean of the data has been darkened to help its visibility to the reader.\nThe gray background has been switched to a white background."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#differences-in-student-performance-among-genders",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#differences-in-student-performance-among-genders",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3.3 Differences in Student Performance Among Genders",
    "text": "3.3 Differences in Student Performance Among Genders\nThe following graph is meant to show the differences between subject performance between the genders of the students.\n\n\nShow code\ngender_math &lt;- ggplot(data = stu_qqq_eda,\n       aes(x = Gender,\n           y = Math_Score)) +\n  geom_boxplot(color=\"grey50\",\n               fill=\"#ADD0B3\") +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"#137a63\",          \n             size=3) +\n  ylim(0,1000) +\n  labs(x = \"\", y = \"Score\", title = \"Mathematics\", axis.title.y = element_blank())\n\ngender_read &lt;- ggplot(data = stu_qqq_eda,\n       aes(x = Gender,\n           y = Reading_Score)) +\n  geom_boxplot(color=\"grey50\",\n               fill=\"#ADD0B3\") +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"#137a63\",          \n             size=3) +\n  ylim(0,1000) +\n  labs(x = \"\", title = \"Reading\") +\n  theme(axis.text.y = element_blank(), axis.title.y = element_blank())\n\ngender_sci &lt;- ggplot(data = stu_qqq_eda,\n       aes(x = Gender,\n           y = Science_Score)) +\n  geom_boxplot(color=\"grey50\",\n               fill=\"#ADD0B3\") +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"#137a63\",          \n             size=3) +\n  ylim(0,1000) +\n  labs(x = \"\", title = \"Science\") +\n  theme(axis.text.y = element_blank(), axis.title.y = element_blank())\n\ngender_math + gender_read + gender_sci\n\n\n\n\n\n\n\n\n\n\nCritique\nClarity\n\nLooking at the size of the graphs, a closer view of the ranges could be done by decreasing the y range of the graphs from 0-1000 to 100-1000. This allows the shapes of the box plots to be more pronounced in order to show the differences between scores.\nGiven that male and female students are being compared, adding a notch to the box plots would allow for a clearer observation of significant differences between the genders by showing the 95% confidence interval between the genders.\n\nAesthetics\n\nGiven that the previous graph was also a box plot, the sudden inclusion of filling the graph in with the color green is inconsistent with the previous style of the box plot.\nThe change of the colors for outliers and the mean compared to the last graph is also inconsistent with the pre-established format.\n\n\n\nRecreation\n\n\nShow code\ngender_math &lt;- ggplot(data = stu_qqq_eda,\n       aes(x = Gender,\n           y = Math_Score)) +\n  geom_boxplot(outlier.colour = \"#137a63\",\n               notch=TRUE) +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",\n             shape = 18,\n             colour =\"#137a63\",          \n             size=3) +\n  coord_cartesian(ylim = c(100, 1000))+\n  labs(x = \"\", y = \"Score\", title = \"Mathematics\", axis.title.y = element_blank())+\n  theme_hc()+\n  scale_y_continuous(breaks = seq(100, 1000, by = 100))\n\ngender_read &lt;- ggplot(data = stu_qqq_eda,\n       aes(x = Gender,\n           y = Reading_Score)) +\n  geom_boxplot(outlier.colour = \"#137a63\",\n               notch=TRUE) +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",\n             shape = 18,\n             colour =\"#137a63\",          \n             size=3) +\n  coord_cartesian(ylim = c(100, 1000))+\n  labs(x = \"\", title = \"Reading\") +\n  theme(axis.text.y = element_blank(), axis.title.y = element_blank())+\n  theme_hc()+\n  scale_y_continuous(breaks = seq(100, 1000, by = 100))\n\ngender_sci &lt;- ggplot(data = stu_qqq_eda,\n       aes(x = Gender,\n           y = Science_Score)) +\n  geom_boxplot(outlier.colour = \"#137a63\",\n               notch=TRUE) +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",\n             shape = 18,\n             colour =\"#137a63\",          \n             size=3) +\n  coord_cartesian(ylim = c(100, 1000))+\n  labs(x = \"\", title = \"Science\") +\n  theme(axis.text.y = element_blank(), axis.title.y = element_blank())+\n  theme_hc()+\n  scale_y_continuous(breaks = seq(100, 1000, by = 100))\n\ngender_math + gender_read + gender_sci\n\n\n\n\n\n\n\n\n\n\n\nChanges\nClarity\n\nThe y range of the graphs has been changed from 0-1000 to 100-1000. This allows the shapes of the box plots to be more pronounced in order to show the differences between scores.\nA notch to the box plots was added to show the 95% confidence interval between the genders.\n\nAesthetics\n\nThe green fill of the box plot was removed to maintain uniformity with the previous box plot.\nThe colors of the outliers has been changed to match the previous box plot.\nThe color and shape of the mean has been changed to match the previous box plot.\nThe gray background has been changed to match the website’s background."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#socioeconomic-status",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#socioeconomic-status",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3.4 Socioeconomic Status",
    "text": "3.4 Socioeconomic Status\nThe following graph shows the correlation between a student’s Socioeconomic Status and their grades.\n\n\nShow code\ncor1 &lt;- round(cor(stu_qqq_socio$Math_Score, stu_qqq_socio$Socioeconomic_Stat),2)\ncor2 &lt;- round(cor(stu_qqq_socio$Reading_Score, stu_qqq_socio$Socioeconomic_Stat),2)\ncor3 &lt;- round(cor(stu_qqq_socio$Science_Score, stu_qqq_socio$Socioeconomic_Stat),2)\n\np1 &lt;- ggplot(data = stu_qqq_socio,\n             aes(y = Math_Score, x = Socioeconomic_Stat)) +\n  geom_point(size = 0.1, color = \"#137a63\") +\n  geom_smooth(method = lm, color = \"black\") +\n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", cor1), color = 'black')\n\np2 &lt;- ggplot(data = stu_qqq_socio,\n       aes(y = Reading_Score, x = Socioeconomic_Stat)) +\n  geom_point(size = 0.1, color = \"#137a63\")+\n  geom_smooth(method = lm, color = \"black\") + \n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", cor2), color = 'black')\n\np3 &lt;- ggplot(data = stu_qqq_socio,\n       aes(y = Science_Score, x = Socioeconomic_Stat)) +\n  geom_point(size = 0.1, color = \"#137a63\")+\n  geom_smooth(method = lm, color = \"black\") +\n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", cor3), color = 'black')\n\np1/p2/p3\n\n\n\n\n\n\n\n\n\n\nCritique\nClarity\n\nObserving the graphs, the compression of the values into a very narrow space exaggerates the correlation of the student’s socioeconomic status and their grades. The r value is at 0.41-0.42 and yet the graphs show a very clear upward trend. Enlarging the space for the y-axis should provide the viewer with a clearer understanding of the correlation.\nThe scales of the 3 graphs are also inconsistent. Adding a uniform scale could help in comparing the data from one to the other.\nA title to the graphs could be added to make the information being presented clearer.\n\nAesthetics\n\nThe labels of the x and y axis contain underscores, these could be removed.\nThe gray background could be changed to match the website’s white background.\n\n\n\nRecreation\n\nMathReadingScience\n\n\n\n\nShow code\nggplot(data = stu_qqq_socio,\n             aes(y = Math_Score, x = Socioeconomic_Stat)) +\n  geom_point(size = 0.1, color = \"#137a63\") +\n  geom_smooth(method = lm, color = \"black\") +\n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", cor1), color = 'black')+\n  labs(x = \"Socioeconomic Score\", y = \"Math Score\")+\n  ggtitle(\"Math Score by Socioeconomic Status\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nggplot(data = stu_qqq_socio,\n       aes(y = Reading_Score, x = Socioeconomic_Stat)) +\n  geom_point(size = 0.1, color = \"#137a63\")+\n  geom_smooth(method = lm, color = \"black\") + \n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", cor2), color = 'black')+\n  labs(x = \"Socioeconomic Score\", y = \"Math Score\")+\n  ggtitle(\"Reading Score by Socioeconomic Status\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100))\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nggplot(data = stu_qqq_socio,\n       aes(y = Science_Score, x = Socioeconomic_Stat)) +\n  geom_point(size = 0.1, color = \"#137a63\")+\n  geom_smooth(method = lm, color = \"black\") +\n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", cor3), color = 'black')+\n  labs(x = \"Socioeconomic Score\", y = \"Math Score\")+\n  ggtitle(\"Science Score by Socioeconomic Status\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChanges\nClarity\n\nThe graphs has been split into 3 tabs to allow each graph to clearly show the spread of the points.\nThe graph scales have all been made uniform to help see differences between one graph to the other.\nA title to the graphs has been added to make the information being presented clearer.\n\nAesthetics\n\nThe labels of the x and y axis have been changed.\nThe gray background was changed to match the website’s white background."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 VAA"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "For this exercise, the following R packages will be used:\n\ntidyverse, a family of R packages for data science process.\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots.\nggdist for visualising distribution and uncertainty.\nggstatsplot package to create visual graphics with rich statistical information.\nperformance package to visualise model diagnostics.\nparameters package to visualise model parameters.\nplotly for creating interactive plot.\ngganimate for creating animation plot.\nDT for displaying interactive html table.\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering).\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse, ggstatsplot, rstantools, readxl, performance, parameters, see, ungeviz, plotly, crosstalk, DT, gganimate, FunnelPlotR, knitr)\n\n\n\n\nOnce again, Exam_data.csv will be utilized for the exercise.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nOnce these steps are completed, the exercise may begin."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-packages",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "For this exercise, the following R packages will be used:\n\ntidyverse, a family of R packages for data science process.\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots.\nggdist for visualising distribution and uncertainty.\nggstatsplot package to create visual graphics with rich statistical information.\nperformance package to visualise model diagnostics.\nparameters package to visualise model parameters.\nplotly for creating interactive plot.\ngganimate for creating animation plot.\nDT for displaying interactive html table.\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering).\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse, ggstatsplot, rstantools, readxl, performance, parameters, see, ungeviz, plotly, crosstalk, DT, gganimate, FunnelPlotR, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#data-import",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Once again, Exam_data.csv will be utilized for the exercise.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nOnce these steps are completed, the exercise may begin."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#ridgeline-plot",
    "title": "Hands-on Exercise 4",
    "section": "Ridgeline Plot",
    "text": "Ridgeline Plot\nRidgeline plots show a dataset’s distribution of numeric values. There are many options as to how these can be visualized.\n\nColor GradientProbability per Category (Section)Quantile RangesQuantile with Cut Points\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#raincloud-plot",
    "title": "Hands-on Exercise 4",
    "section": "Raincloud Plot",
    "text": "Raincloud Plot\nRaincloud is a similar visualization technique to that of the boxplot. However, this method allows viewers to gain a clearer view of the dataset by showing areas where densities are clustered. However, a rancloud may be combined with a boxplot and a half-dotplot in order to show a clearer view of the data.\n\nLone RaincloudRaincloud + Boxplot + Half-dot\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-sample-test",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-sample-test",
    "title": "Hands-on Exercise 4",
    "section": "One-sample Test",
    "text": "One-sample Test\nThe code chunk below is used to build a one-sample test on the different test scores\n\nEnglishMathScience\n\n\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = MATHS,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"Math scores\"\n)\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = SCIENCE,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"Science scores\"\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#two-sample-mean-test",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#two-sample-mean-test",
    "title": "Hands-on Exercise 4",
    "section": "Two-sample Mean Test",
    "text": "Two-sample Mean Test\nThe code chunk below builds a visual two-sample mean test for each subject score by gender.\n\nEnglishMathSicence\n\n\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = ENGLISH,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = SCIENCE,\n  type = \"np\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-way-anova-test",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-way-anova-test",
    "title": "Hands-on Exercise 4",
    "section": "One-way ANOVA Test",
    "text": "One-way ANOVA Test\nThe code chunk below builds a One-way ANOVA test for the subject scores by race.\n\nEnglishMathScience\n\n\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = MATHS,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = SCIENCE,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-correlation",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-correlation",
    "title": "Hands-on Exercise 4",
    "section": "Significant Test of Correlation",
    "text": "Significant Test of Correlation\nThe code chunk below can be used to create a Significant Test of Correlation between the scores per subject.\n\nEnglish-MathEnglish-ScienceMath-Science\n\n\n\nggscatterstats(\n  data = exam,\n  x = ENGLISH,\n  y = MATHS,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = exam,\n  x = ENGLISH,\n  y = SCIENCE,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = SCIENCE,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-association",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-association",
    "title": "Hands-on Exercise 4",
    "section": "Significant Test of Association",
    "text": "Significant Test of Association\nThe code chunk below bins the Math scores into 4-class variables and then builds a visual for Significant Test of Association\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-regression-parameters",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-regression-parameters",
    "title": "Hands-on Exercise 4",
    "section": "Visualizing Regression Parameters",
    "text": "Visualizing Regression Parameters\nThere are 2 options to visualize the parameters of a regression model.\n\nOption 1Option 2\n\n\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Exercise 2",
    "section": "",
    "text": "Loading the packages:\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\np1 + p2\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "git-filter-repo/INSTALL.html",
    "href": "git-filter-repo/INSTALL.html",
    "title": "Table of Contents",
    "section": "",
    "text": "Table of Contents\n\nPre-requisites\nSimple Installation\nInstallation via Package Manager\nDetailed installation explanation for packagers\nInstallation via Makefile\nNotes for Windows Users\n\n\n\nPre-requisites\nInstructions on this page assume you have already installed both Git and Python (though the Notes for Windows Users has some tips on Python).\n\n\nSimple Installation\nAll you need to do is download one file: the git-filter-repo script in this repository (direct link to raw file), making sure to preserve its name (git-filter-repo, with no extension). That’s it. You’re done.\nThen you can run any command you want, such as\n$ python3 git-filter-repo --analyze\nIf you place the git-filter-repo script in your $PATH, then you can shorten commands by replacing python3 git-filter-repo with git filter-repo; the manual assumes this but you can use the longer form.\nIf for some reason downloading a single file is too much of an installation hassle for you, or you really want some kind of “official installation”, the other sections may have useful tips.\nOptionally, if you also want to use some of the contrib scripts, then you need to make sure you have a git_filter_repo.py file which is either a link to or copy of git-filter-repo, and you need to place that git_filter_repo.py file in $PYTHONPATH.\n\n\nInstallation via Package Manager\nIf you want to install via some package manager, you can run\n$ PACKAGE_TOOL install git-filter-repo\nThe following package managers have packaged git-filter-repo:\n\n\n\nPackaging status\n\n\nThis list covers at least Windows (Scoop), Mac OS X (Homebrew), and Linux (most the rest). Note that I do not curate this list (and have no interest in doing so); https://repology.org tracks who packages these versions.\n\n\nDetailed installation explanation for packagers\nfilter-repo only consists of a few files that need to be installed:\n\ngit-filter-repo\nThis is the only thing needed for basic use.\nThis can be installed in the directory pointed to by git --exec-path, or placed anywhere in $PATH.\nIf your python3 executable is named “python” instead of “python3” (this particularly appears to affect a number of Windows users), then you’ll also need to modify the first line of git-filter-repo to replace “python3” with “python”.\ngit_filter_repo.py\nThis is needed if you want to make use of one of the scripts in contrib/filter-repo-demos/, or want to write your own script making use of filter-repo as a python library.\nYou can create this symlink to (or copy of) git-filter-repo named git_filter_repo.py and place it in your python site packages; python -c \"import site; print(site.getsitepackages())\" may help you find the appropriate location for your system. Alternatively, you can place this file anywhere within $PYTHONPATH.\ngit-filter-repo.1\nThis is needed if you want git filter-repo --help to succeed in displaying the manpage, when help.format is “man” (the default on Linux and Mac).\nThis can be installed in the directory pointed to by $(git --man-path)/man1/, or placed anywhere in $MANDIR/man1/ where $MANDIR is some entry from $MANPATH.\nNote that git filter-repo -h will show a more limited built-in set of instructions regardless of whether the manpage is installed.\ngit-filter-repo.html\nThis is needed if you want git filter-repo --help to succeed in displaying the html version of the help, when help.format is set to “html” (the default on Windows).\nThis can be installed in the directory pointed to by git --html-path.\nNote that git filter-repo -h will show a more limited built-in set of instructions regardless of whether the html version of help is installed.\n\nSo, installation might look something like the following:\n\nIf you don’t have the necessary documentation files (because you are installing from a clone of filter-repo instead of from a tarball) then you can first run:\nmake snag_docs\n(which just copies the generated documentation files from the docs branch)\nRun the following\ncp -a git-filter-repo $(git --exec-path)\ncp -a git-filter-repo.1 $(git --man-path)/man1 && mandb\ncp -a git-filter-repo.html $(git --html-path)\nln -s $(git --exec-path)/git-filter-repo \\\n    $(python -c \"import site; print(site.getsitepackages()[-1])\")/git_filter_repo.py\n\nor you can use the provided Makefile, as noted below.\n\n\nInstallation via Makefile\nInstalling should be doable by hand, but a Makefile is provided for those that prefer it. However, usage of the Makefile really requires overridding at least a couple of the directories with sane values, e.g.\n$ make prefix=/usr pythondir=/usr/lib64/python3.8/site-packages install\nAlso, the Makefile will not edit the shebang line (the first line) of git-filter-repo if your python executable is not named “python3”; you’ll still need to do that yourself.\n\n\nNotes for Windows Users\nWindows likes to make things difficult. Common and historical issues:\n\nNon-functional Python stub: Windows apparently ships with a non-functional python. This can even manifest as the app hanging or the system appearing to hang. Try installing Python from the Microsoft Store\nModifying PATH, making the script executable: For some reason lots of Windows users have a hard time modifying their PATH and/or making scripts executable. You can skip that step by just using python3 git-filter-repo instead of git filter-repo in your commands.\nDifferent python executable name: It seems some users don’t have a python3 executable but one named something else like python or python3.8 or whatever. You may need to edit the first line of the git-filter-repo script to specify the appropriate path. Or just don’t bother and instead use the long form for executing filter-repo commands. Namely, replace the git filter-repo part of commands with PYTHON_EXECUTABLE git-filter-repo. (Where PYTHON_EXECUTABLE is something like python or python3.8 or C:\\PATH\\TO\\INSTALLATION\\OF\\python3.exe or whatever).\nSymlink issues: git_filter_repo.py is supposed to be a symlink to git-filter-repo, so that it appears to have identical contents. If your system messed up the symlink (usually meaning it looks like a regular file with just one line), then delete git_filter_repo.py and replace it with a copy of git-filter-repo.\nOld GitBash limitations: older versions of GitForWindows had an unfortunate shebang length limitation (see git-for-windows issue #3165). If you’re affected, just use the long form for invoking filter-repo commands, i.e. replace the git filter-repo part of commands with python3 git-filter-repo.\n\nFor additional historical context, see: * #371 * #360 * #312 * #307 * #225 * #231 * #124 * #36 * this git mailing list thread"
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-bfg-repo-cleaner.html",
    "href": "git-filter-repo/Documentation/converting-from-bfg-repo-cleaner.html",
    "title": "Cheat Sheet: Converting from BFG Repo Cleaner",
    "section": "",
    "text": "This document is aimed at folks who are familiar with BFG Repo Cleaner and want to learn how to convert over to using filter-repo.\n\n\n\nHalf-hearted conversions\nIntention of “equivalent” commands\nBasic Differences\nCheat Sheet: Conversion of Examples from BFG\n\n\n\n\nYou can switch most any BFG command to use filter-repo under the covers by just replacing the java -jar bfg.jar part of the command with bfg-ish.\nbfg-ish is a reasonable tool, and provides a number of bug fixes and features on top of bfg, but most of my focus is naturally on filter-repo which has a number of capabilities lacking in bfg-ish.\n\n\n\nBFG and filter-repo have a few differences, highlighted in the Basic Differences section below, that make it hard to get commands that behave identically. Rather than focusing on matching BFG output as exactly as possible, I treat the BFG examples as idiomatic ways to solve a certain type of problem with BFG, and express how one would idiomatically solve the same problem in filter-repo. Sometimes that means the results are not identical, but they are largely the same in each case.\n\n\n\nBFG operates directly on tree objects, which have no notion of their leading path. Thus, it has no way of differentiating between ‘README.md’ at the toplevel versus in some subdirectory. You simply operate on the basename of files and directories. This precludes doing things like renaming files and directories or other bigger restructures. By directly operating on trees, it also runs into problems with loose vs. packed objects, loose vs. packed refs, not understanding replace refs or grafts, and not understanding the index and working tree as another data source.\nWith git filter-repo, you are essentially given an editing tool to operate on the fast-export serialization of a repo, which operates on filenames including their full paths from the toplevel of the repo. Directories are not separately specified, so any directory-related filtering is done by checking the leading path of each file. Further, you aren’t limited to the pre-defined filtering types, python callbacks which operate on the data structures from the fast-export stream can be provided to do just about anything you want. By leveraging fast-export and fast-import, filter-repo gains automatic handling of objects and refs whether they are packed or not, automatic handling of replace refs and grafts, and future features that may appear. It also tries hard to provide a full rewrite solution, so it takes care of additional important concerns such as updating the index and working tree and running an automatic gc for the user afterwards.\nThe “protection” and “privacy” defaults in BFG are something I fundamentally disagreed with for a variety of reasons; see the comments at the top of the bfg-ish script if you want details. The bfg-ish script implemented these protection and privacy options since it was designed to act like BFG, but still flipped the default to the opposite of what BFG chose. I left the “protection” and “non-private” features out of filter-repo entirely. This means a number of things with filter-repo: * any filters you specify will also be applied to HEAD, so that you don’t have a weird disconnect from your history transformations only being applied to most commits * [formerly OLDHASH] references are not munged into commit messages; the replace refs that filter-repo adds are a much cleaner way of looking up commits by old commit hashes. * Former-commit-id: footers are not added to commit messages; the replace refs that filter-repo adds are a much cleaner way of looking up commits by old commit hashes. * History is not littered with &lt;filename&gt;.REMOVED.git-id files.\nBFG expects you to specify the repository to rewrite as its final argument, whereas filter-repo expects you to cd into the repo and then run filter-repo.\n\n\n\n\n\n  java -jar bfg.jar --strip-blobs-bigger-than 100M some-big-repo.git\nbecomes\n  git filter-repo --strip-blobs-bigger-than 100M\n\n\n\n  java -jar bfg.jar --delete-files id_{dsa,rsa}  my-repo.git\nbecomes\n  git filter-repo --use-base-name --path id_dsa --path id_rsa --invert-paths\n\n\n\n  java -jar bfg.jar --replace-text passwords.txt my-repo.git\nbecomes\n  git filter-repo --replace-text passwords.txt\nThe --replace-text was a really clever idea that the BFG came up with and I just implemented mostly as-is within filter-repo. Sadly, BFG didn’t document the format of files passed to –replace text very well, but I added more detail in the filter-repo documentation.\nThere is one small but important difference between the two tools: if you use both “regex:” and “==&gt;” on a single line to specify a regex search and replace, then filter-repo will use “\\1”, “\\2”, “\\3”, etc. for replacement strings whereas BFG used “$1”, “$2”, “$3”, etc. The reason for this difference is simply that python used backslashes in its regex format while scala used dollar signs, and both tools wanted to just pass along the strings unmodified to the underlying language. (Since bfg-ish attempts to emulate the BFG, it accepts “$1”, “$2” and so forth and translates them to “\\1”, “\\2”, etc. so that filter-repo/python will understand it.)\n\n\n\n  java -jar bfg.jar --delete-folders .git --delete-files .git --no-blob-protection  my-repo.git\nbecomes\n  git filter-repo --invert-paths --path-glob '*/.git' --path .git\nYes, that glob will handle .git directories one or more directories deep; it’s a git-style glob rather than a shell-style glob. Also, the --path .git was added because --path-glob '*/.git' won’t match a directory named .git in the toplevel directory since it has a ‘/’ character in the glob expression (though I would hope the repository doesn’t have a tracked .git toplevel directory in its history)."
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-bfg-repo-cleaner.html#table-of-contents",
    "href": "git-filter-repo/Documentation/converting-from-bfg-repo-cleaner.html#table-of-contents",
    "title": "Cheat Sheet: Converting from BFG Repo Cleaner",
    "section": "",
    "text": "Half-hearted conversions\nIntention of “equivalent” commands\nBasic Differences\nCheat Sheet: Conversion of Examples from BFG"
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-bfg-repo-cleaner.html#half-hearted-conversions",
    "href": "git-filter-repo/Documentation/converting-from-bfg-repo-cleaner.html#half-hearted-conversions",
    "title": "Cheat Sheet: Converting from BFG Repo Cleaner",
    "section": "",
    "text": "You can switch most any BFG command to use filter-repo under the covers by just replacing the java -jar bfg.jar part of the command with bfg-ish.\nbfg-ish is a reasonable tool, and provides a number of bug fixes and features on top of bfg, but most of my focus is naturally on filter-repo which has a number of capabilities lacking in bfg-ish."
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-bfg-repo-cleaner.html#intention-of-equivalent-commands",
    "href": "git-filter-repo/Documentation/converting-from-bfg-repo-cleaner.html#intention-of-equivalent-commands",
    "title": "Cheat Sheet: Converting from BFG Repo Cleaner",
    "section": "",
    "text": "BFG and filter-repo have a few differences, highlighted in the Basic Differences section below, that make it hard to get commands that behave identically. Rather than focusing on matching BFG output as exactly as possible, I treat the BFG examples as idiomatic ways to solve a certain type of problem with BFG, and express how one would idiomatically solve the same problem in filter-repo. Sometimes that means the results are not identical, but they are largely the same in each case."
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-bfg-repo-cleaner.html#basic-differences",
    "href": "git-filter-repo/Documentation/converting-from-bfg-repo-cleaner.html#basic-differences",
    "title": "Cheat Sheet: Converting from BFG Repo Cleaner",
    "section": "",
    "text": "BFG operates directly on tree objects, which have no notion of their leading path. Thus, it has no way of differentiating between ‘README.md’ at the toplevel versus in some subdirectory. You simply operate on the basename of files and directories. This precludes doing things like renaming files and directories or other bigger restructures. By directly operating on trees, it also runs into problems with loose vs. packed objects, loose vs. packed refs, not understanding replace refs or grafts, and not understanding the index and working tree as another data source.\nWith git filter-repo, you are essentially given an editing tool to operate on the fast-export serialization of a repo, which operates on filenames including their full paths from the toplevel of the repo. Directories are not separately specified, so any directory-related filtering is done by checking the leading path of each file. Further, you aren’t limited to the pre-defined filtering types, python callbacks which operate on the data structures from the fast-export stream can be provided to do just about anything you want. By leveraging fast-export and fast-import, filter-repo gains automatic handling of objects and refs whether they are packed or not, automatic handling of replace refs and grafts, and future features that may appear. It also tries hard to provide a full rewrite solution, so it takes care of additional important concerns such as updating the index and working tree and running an automatic gc for the user afterwards.\nThe “protection” and “privacy” defaults in BFG are something I fundamentally disagreed with for a variety of reasons; see the comments at the top of the bfg-ish script if you want details. The bfg-ish script implemented these protection and privacy options since it was designed to act like BFG, but still flipped the default to the opposite of what BFG chose. I left the “protection” and “non-private” features out of filter-repo entirely. This means a number of things with filter-repo: * any filters you specify will also be applied to HEAD, so that you don’t have a weird disconnect from your history transformations only being applied to most commits * [formerly OLDHASH] references are not munged into commit messages; the replace refs that filter-repo adds are a much cleaner way of looking up commits by old commit hashes. * Former-commit-id: footers are not added to commit messages; the replace refs that filter-repo adds are a much cleaner way of looking up commits by old commit hashes. * History is not littered with &lt;filename&gt;.REMOVED.git-id files.\nBFG expects you to specify the repository to rewrite as its final argument, whereas filter-repo expects you to cd into the repo and then run filter-repo."
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-bfg-repo-cleaner.html#cheat-sheet-conversion-of-examples-from-bfg",
    "href": "git-filter-repo/Documentation/converting-from-bfg-repo-cleaner.html#cheat-sheet-conversion-of-examples-from-bfg",
    "title": "Cheat Sheet: Converting from BFG Repo Cleaner",
    "section": "",
    "text": "java -jar bfg.jar --strip-blobs-bigger-than 100M some-big-repo.git\nbecomes\n  git filter-repo --strip-blobs-bigger-than 100M\n\n\n\n  java -jar bfg.jar --delete-files id_{dsa,rsa}  my-repo.git\nbecomes\n  git filter-repo --use-base-name --path id_dsa --path id_rsa --invert-paths\n\n\n\n  java -jar bfg.jar --replace-text passwords.txt my-repo.git\nbecomes\n  git filter-repo --replace-text passwords.txt\nThe --replace-text was a really clever idea that the BFG came up with and I just implemented mostly as-is within filter-repo. Sadly, BFG didn’t document the format of files passed to –replace text very well, but I added more detail in the filter-repo documentation.\nThere is one small but important difference between the two tools: if you use both “regex:” and “==&gt;” on a single line to specify a regex search and replace, then filter-repo will use “\\1”, “\\2”, “\\3”, etc. for replacement strings whereas BFG used “$1”, “$2”, “$3”, etc. The reason for this difference is simply that python used backslashes in its regex format while scala used dollar signs, and both tools wanted to just pass along the strings unmodified to the underlying language. (Since bfg-ish attempts to emulate the BFG, it accepts “$1”, “$2” and so forth and translates them to “\\1”, “\\2”, etc. so that filter-repo/python will understand it.)\n\n\n\n  java -jar bfg.jar --delete-folders .git --delete-files .git --no-blob-protection  my-repo.git\nbecomes\n  git filter-repo --invert-paths --path-glob '*/.git' --path .git\nYes, that glob will handle .git directories one or more directories deep; it’s a git-style glob rather than a shell-style glob. Also, the --path .git was added because --path-glob '*/.git' won’t match a directory named .git in the toplevel directory since it has a ‘/’ character in the glob expression (though I would hope the repository doesn’t have a tracked .git toplevel directory in its history)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "git-filter-repo/Documentation/Contributing.html",
    "href": "git-filter-repo/Documentation/Contributing.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to the community!\nContributions need to meet the bar for inclusion in git.git. Although filter-repo is not part of the git.git repository, I want to leave the option open for it to be merged in the future. As such, any contributions need to follow the same guidelines for contribution to git.git, with a few exceptions:\n\nWhile I hate GitHub PRs (as others point out, it’s mind-boggling in a bad way that web-based Git hosting and code review systems do such a poor job), git-format-patch and git-send-email can be a beast and I have not yet found time to modify Dscho’s excellent GitGitGadget to work with git-filter-repo. As such:\n\nFor very short single-commit changes, feel free to open GitHub PRs.\nFor more involved changes, if format-patch or send-email give you too much trouble, go ahead and open a GitHub PR and just mention that email didn’t work out.\n\nIf emailing patches to the git list:\n\nInclude “filter-repo” at the start of the subject, e.g. “[filter-repo PATCH] Add packaging scripts for uploading to PyPI” instead of just “[PATCH] Add packaging scripts for uploading to PyPI”\nCC me instead of the git maintainer\n\nGit’s CodingGuidlines for python code are only partially applicable:\n\npython3 is a hard requirement; python2 is/was EOL at the end of 2019 and should not be used. (Commit 4d0264ab723c (“filter-repo: workaround python&lt;2.7.9 exec bug”, 2019-04-30) was the last version of filter-repo that worked with python2).\nYou can depend on anything in python 3.5 or earlier. I may bump this minimum version over time, but do want to generally work with the python3 version found in current enterprise Linux distributions.\nIn filter-repo, it’s not just OK to use bytestrings, you are expected to use them a lot. Using unicode strings result in lots of ugly errors since input comes from filesystem names, commit messages, file contents, etc., none of which are guaranteed to be unicode. (Plus unicode strings require lots of effort to verify, encode, and decode – slowing the filtering process down). I tried to work with unicode strings more broadly in the code base multiple times; but it’s just a bad idea to use an abstraction that doesn’t fit the data.\nI generally like PEP 8, but used two-space indents for years before learning of it and have just continued that habit. For consistency, contributions should also use two-space indents and otherwise generally follow PEP 8.\n\n\nThere are a few extra things I would like folks to keep in mind:\n\nPlease test line coverage if you add or modify code\n\nmake test will run the testsuite under coverage3 (which you will need to install), and report on line coverage. Line coverage of git-filter-repo needs to remain at 100%; line coverage of contrib and test scripts can be ignored.\n\nPlease do not be intimidated by detailed feedback:\n\nIn the git community, I have been contributing for years and have had hundreds of patches accepted but I still find that even when I try to make patches perfect I am not surprised when I have to spend as much or more time fixing up patches after submitting them than I did figuring out the patches in the first place. git folks tend to do thorough reviews, which has taught me a lot, and I try to do the same for filter-repo. Plus, as noted above, I want contributions from others to be acceptable in git.git itself."
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-filter-branch.html",
    "href": "git-filter-repo/Documentation/converting-from-filter-branch.html",
    "title": "Cheat Sheet: Converting from filter-branch",
    "section": "",
    "text": "This document is aimed at folks who are familiar with filter-branch and want to learn how to convert over to using filter-repo.\n\n\n\nHalf-hearted conversions\nIntention of “equivalent” commands\nBasic Differences\nCheat Sheet: Conversion of Examples from the filter-branch manpage\nCheat Sheet: Additional conversion examples\n\n\n\n\nYou can switch nearly any git filter-branch command to use filter-repo under the covers by just replacing the git filter-branch part of the command with filter-lamely. The git.git regression testsuite passes when I swap out the filter-branch script with filter-lamely, for example. (However, the filter-branch tests are not very comprehensive, so don’t rely on that too much.)\nDoing a half-hearted conversion has nearly all of the drawbacks of filter-branch and nearly none of the benefits of filter-repo, but it will make your command run a few times faster and makes for a very simple conversion.\nYou’ll get a lot more performance, safety, and features by just switching to direct filter-repo commands.\n\n\n\nfilter-branch and filter-repo have different defaults, as highlighted in the Basic Differences section below. As such, getting a command which behaves identically is not possible. Also, sometimes the filter-branch manpage lies, e.g. it says “suppose you want to…from all commits” and then uses a command line like “git filter-branch … HEAD”, which only operates on commits in the current branch rather than on all commits.\nRather than focusing on matching filter-branch output as exactly as possible, I treat the filter-branch examples as idiomatic ways to solve a certain type of problem with filter-branch, and express how one would idiomatically solve the same problem in filter-repo. Sometimes that means the results are not identical, but they are largely the same in each case.\n\n\n\nWith git filter-branch, you have a git repository where every single commit (within the branches or revisions you specify) is checked out and then you run one or more shell commands to transform the working copy into your desired end state.\nWith git filter-repo, you are essentially given an editing tool to operate on the fast-export serialization of a repo. That means there is an input stream of all the contents of the repository, and rather than specifying filters in the form of commands to run, you usually employ a number of common pre-defined filters that provide various ways to slice, dice, or modify the repo based on its components (such as pathnames, file content, user names or emails, etc.) That makes common operations easier, even if it’s not as versatile as shell callbacks. For cases where more complexity or special casing is needed, filter-repo provides python callbacks that can operate on the data structures populated from the fast-export stream to do just about anything you want.\nfilter-branch defaults to working on a subset of the repository, and requires you to specify a branch or branches, meaning you need to specify -- --all to modify all commits. filter-repo by contrast defaults to rewriting everything, and you need to specify --refs &lt;rev-list-args&gt; if you want to limit to just a certain set of branches or range of commits. (Though any &lt;rev-list-args&gt; that begin with a hyphen are not accepted by filter-repo as they look like the start of different options.)\nfilter-repo also takes care of additional concerns automatically, like rewriting commit messages that reference old commit IDs to instead reference the rewritten commit IDs, pruning commits which do not start empty but become empty due to the specified filters, and automatically shrinking and gc’ing the repo at the end of the filtering operation.\n\n\n\n\n\nThe filter-branch manual provided three different examples of removing a single file, based on different levels of ease vs. carefulness and performance:\n  git filter-branch --tree-filter 'rm filename' HEAD\n  git filter-branch --tree-filter 'rm -f filename' HEAD\n  git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD\nAll of these just become\n  git filter-repo --invert-paths --path filename\n\n\n\nExtracting a subdirectory via\n  git filter-branch --subdirectory-filter foodir -- --all\nis one of the easiest commands to convert; it just becomes\n  git filter-repo --subdirectory-filter foodir\n\n\n\nKeeping all files but placing them in a new subdirectory via\n  git filter-branch --index-filter \\\n      'git ls-files -s | sed \"s-\\t\\\"*-&newsubdir/-\" |\n              GIT_INDEX_FILE=$GIT_INDEX_FILE.new \\\n                      git update-index --index-info &&\n       mv \"$GIT_INDEX_FILE.new\" \"$GIT_INDEX_FILE\"' HEAD\n(which happens to be GNU-specific and will fail with BSD userland in very subtle ways) becomes\n  git filter-repo --to-subdirectory-filter newsubdir\n(which works fine regardless of GNU vs BSD userland differences.)\n\n\n\nThe filter-branch manual provided one example with three different commands that could be used to achieve it, though the first of them had limited applicability (only when the repo had a single initial commit). These three examples were:\n  git filter-branch --parent-filter 'sed \"s/^\\$/-p &lt;graft-id&gt;/\"' HEAD\n  git filter-branch --parent-filter \\\n      'test $GIT_COMMIT = &lt;commit-id&gt; && echo \"-p &lt;graft-id&gt;\" || cat' HEAD\n  git replace --graft $commit-id $graft-id\n  git filter-branch $graft-id..HEAD\ngit-replace did not exist when the original two examples were written, but it is clear that the last example is far easier to understand. As such, filter-repo just uses the same mechanism:\n  git replace --graft $commit-id $graft-id\n  git filter-repo --force\nNOTE: –force should usually be avoided unless you have taken care to make sure you have a backup (or are running on a fresh clone of) your repo. It is needed in this case because filter-repo errors out when no arguments are specified, and because it usually first checks whether you are in a fresh clone before irrecoverably rewriting your repository (git-replace created a new graft and thus added something to your previously fresh clone).\n\n\n\nWARNING: This is a BAD example for BOTH filter-branch and filter-repo. It does not remove the changes the user made from the repo, it just removes the commit in question while smashing the changes from it into any subsequent commits as though the subsequent authors had been responsible for those changes as well. git rebase is likely to be a better fit for what you really want if you are looking at this example. (See also this explanation of the differences between rebase and filter-repo)\nThis filter-branch example\n  git filter-branch --commit-filter '\n      if [ \"$GIT_AUTHOR_NAME\" = \"Darl McBribe\" ];\n      then\n          skip_commit \"$@\";\n      else\n          git commit-tree \"$@\";\n      fi' HEAD\nbecomes\n  git filter-repo --commit-callback '\n      if commit.author_name == b\"Darl McBribe\":\n          commit.skip()\n      '\n\n\n\nRemoving git-svn-id: lines from commit messages via\n  git filter-branch --msg-filter '\n      sed -e \"/^git-svn-id:/d\"\n      '\nbecomes\n  git filter-repo --message-callback '\n      return re.sub(b\"^git-svn-id:.*\\n\", b\"\", message, flags=re.MULTILINE)\n      '\n\n\n\nAdding Acked-by lines to the last ten commits via\n  git filter-branch --msg-filter '\n          cat &&\n          echo \"Acked-by: Bugs Bunny &lt;bunny@bugzilla.org&gt;\"\n      ' master~10..master\nbecomes\n  git filter-repo --message-callback '\n          return message + b\"Acked-by: Bugs Bunny &lt;bunny@bugzilla.org&gt;\\n\"\n      ' --refs master~10..master\n\n\n\n  git filter-branch --env-filter '\n      if test \"$GIT_AUTHOR_EMAIL\" = \"root@localhost\"\n      then\n              GIT_AUTHOR_EMAIL=john@example.com\n      fi\n      if test \"$GIT_COMMITTER_EMAIL\" = \"root@localhost\"\n      then\n              GIT_COMMITTER_EMAIL=john@example.com\n      fi\n      ' -- --all\nbecomes either\n  # Ensure '&lt;john@example.com&gt; &lt;root@localhost&gt;' is a line in .mailmap, then:\n  git filter-repo --use-mailmap\nor\n  git filter-repo --email-callback '\n    return email if email != b\"root@localhost\" else b\"john@example.com\"\n    '\n(and as a bonus both filter-repo alternatives will fix tagger emails too, unlike the filter-branch example)\n\n\n\nThe partial examples\n  git filter-branch ... C..H\n  git filter-branch ... C..H ^D\n  git filter-branch ... D..H ^C\nbecome\n  git filter-repo ... --refs C..H\n  git filter-repo ... --refs C..H ^D\n  git filter-repo ... --refs D..H ^C\nNote that filter-branch accepts --not among the revision specifiers, but that appears to python to be a flag name which breaks parsing. So, instead of e.g. --not C as we might use with filter-branch, we can specify ^C to filter-repo.\n\n\n\n\n\n\nRunning some program on a subset of files is relatively natural in filter-branch:\n  git filter-branch --tree-filter '\n      git ls-files -z \"*.c\" \\\n          | xargs -0 -n 1 clang-format -style=file -i\n      '\nfilter-repo decided not to provide a way to run an external program to do filtering, because most filter-branch uses of this ability are riddled with safety problems and performance issues. However, in special cases like this it’s fairly safe. One can write a script that uses filter-repo as a library to achieve this, while also gaining filter-repo’s automatic handling of other concerns like rewriting commit IDs in commit messages or pruning commits that become empty. In fact, one of the contrib demos, lint-history, handles this exact type of situation already:\n  lint-history --relevant 'return filename.endswith(b\".c\")' \\\n      clang-format -style=file -i"
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-filter-branch.html#table-of-contents",
    "href": "git-filter-repo/Documentation/converting-from-filter-branch.html#table-of-contents",
    "title": "Cheat Sheet: Converting from filter-branch",
    "section": "",
    "text": "Half-hearted conversions\nIntention of “equivalent” commands\nBasic Differences\nCheat Sheet: Conversion of Examples from the filter-branch manpage\nCheat Sheet: Additional conversion examples"
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-filter-branch.html#half-hearted-conversions",
    "href": "git-filter-repo/Documentation/converting-from-filter-branch.html#half-hearted-conversions",
    "title": "Cheat Sheet: Converting from filter-branch",
    "section": "",
    "text": "You can switch nearly any git filter-branch command to use filter-repo under the covers by just replacing the git filter-branch part of the command with filter-lamely. The git.git regression testsuite passes when I swap out the filter-branch script with filter-lamely, for example. (However, the filter-branch tests are not very comprehensive, so don’t rely on that too much.)\nDoing a half-hearted conversion has nearly all of the drawbacks of filter-branch and nearly none of the benefits of filter-repo, but it will make your command run a few times faster and makes for a very simple conversion.\nYou’ll get a lot more performance, safety, and features by just switching to direct filter-repo commands."
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-filter-branch.html#intention-of-equivalent-commands",
    "href": "git-filter-repo/Documentation/converting-from-filter-branch.html#intention-of-equivalent-commands",
    "title": "Cheat Sheet: Converting from filter-branch",
    "section": "",
    "text": "filter-branch and filter-repo have different defaults, as highlighted in the Basic Differences section below. As such, getting a command which behaves identically is not possible. Also, sometimes the filter-branch manpage lies, e.g. it says “suppose you want to…from all commits” and then uses a command line like “git filter-branch … HEAD”, which only operates on commits in the current branch rather than on all commits.\nRather than focusing on matching filter-branch output as exactly as possible, I treat the filter-branch examples as idiomatic ways to solve a certain type of problem with filter-branch, and express how one would idiomatically solve the same problem in filter-repo. Sometimes that means the results are not identical, but they are largely the same in each case."
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-filter-branch.html#basic-differences",
    "href": "git-filter-repo/Documentation/converting-from-filter-branch.html#basic-differences",
    "title": "Cheat Sheet: Converting from filter-branch",
    "section": "",
    "text": "With git filter-branch, you have a git repository where every single commit (within the branches or revisions you specify) is checked out and then you run one or more shell commands to transform the working copy into your desired end state.\nWith git filter-repo, you are essentially given an editing tool to operate on the fast-export serialization of a repo. That means there is an input stream of all the contents of the repository, and rather than specifying filters in the form of commands to run, you usually employ a number of common pre-defined filters that provide various ways to slice, dice, or modify the repo based on its components (such as pathnames, file content, user names or emails, etc.) That makes common operations easier, even if it’s not as versatile as shell callbacks. For cases where more complexity or special casing is needed, filter-repo provides python callbacks that can operate on the data structures populated from the fast-export stream to do just about anything you want.\nfilter-branch defaults to working on a subset of the repository, and requires you to specify a branch or branches, meaning you need to specify -- --all to modify all commits. filter-repo by contrast defaults to rewriting everything, and you need to specify --refs &lt;rev-list-args&gt; if you want to limit to just a certain set of branches or range of commits. (Though any &lt;rev-list-args&gt; that begin with a hyphen are not accepted by filter-repo as they look like the start of different options.)\nfilter-repo also takes care of additional concerns automatically, like rewriting commit messages that reference old commit IDs to instead reference the rewritten commit IDs, pruning commits which do not start empty but become empty due to the specified filters, and automatically shrinking and gc’ing the repo at the end of the filtering operation."
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-filter-branch.html#cheat-sheet-conversion-of-examples-from-the-filter-branch-manpage",
    "href": "git-filter-repo/Documentation/converting-from-filter-branch.html#cheat-sheet-conversion-of-examples-from-the-filter-branch-manpage",
    "title": "Cheat Sheet: Converting from filter-branch",
    "section": "",
    "text": "The filter-branch manual provided three different examples of removing a single file, based on different levels of ease vs. carefulness and performance:\n  git filter-branch --tree-filter 'rm filename' HEAD\n  git filter-branch --tree-filter 'rm -f filename' HEAD\n  git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD\nAll of these just become\n  git filter-repo --invert-paths --path filename\n\n\n\nExtracting a subdirectory via\n  git filter-branch --subdirectory-filter foodir -- --all\nis one of the easiest commands to convert; it just becomes\n  git filter-repo --subdirectory-filter foodir\n\n\n\nKeeping all files but placing them in a new subdirectory via\n  git filter-branch --index-filter \\\n      'git ls-files -s | sed \"s-\\t\\\"*-&newsubdir/-\" |\n              GIT_INDEX_FILE=$GIT_INDEX_FILE.new \\\n                      git update-index --index-info &&\n       mv \"$GIT_INDEX_FILE.new\" \"$GIT_INDEX_FILE\"' HEAD\n(which happens to be GNU-specific and will fail with BSD userland in very subtle ways) becomes\n  git filter-repo --to-subdirectory-filter newsubdir\n(which works fine regardless of GNU vs BSD userland differences.)\n\n\n\nThe filter-branch manual provided one example with three different commands that could be used to achieve it, though the first of them had limited applicability (only when the repo had a single initial commit). These three examples were:\n  git filter-branch --parent-filter 'sed \"s/^\\$/-p &lt;graft-id&gt;/\"' HEAD\n  git filter-branch --parent-filter \\\n      'test $GIT_COMMIT = &lt;commit-id&gt; && echo \"-p &lt;graft-id&gt;\" || cat' HEAD\n  git replace --graft $commit-id $graft-id\n  git filter-branch $graft-id..HEAD\ngit-replace did not exist when the original two examples were written, but it is clear that the last example is far easier to understand. As such, filter-repo just uses the same mechanism:\n  git replace --graft $commit-id $graft-id\n  git filter-repo --force\nNOTE: –force should usually be avoided unless you have taken care to make sure you have a backup (or are running on a fresh clone of) your repo. It is needed in this case because filter-repo errors out when no arguments are specified, and because it usually first checks whether you are in a fresh clone before irrecoverably rewriting your repository (git-replace created a new graft and thus added something to your previously fresh clone).\n\n\n\nWARNING: This is a BAD example for BOTH filter-branch and filter-repo. It does not remove the changes the user made from the repo, it just removes the commit in question while smashing the changes from it into any subsequent commits as though the subsequent authors had been responsible for those changes as well. git rebase is likely to be a better fit for what you really want if you are looking at this example. (See also this explanation of the differences between rebase and filter-repo)\nThis filter-branch example\n  git filter-branch --commit-filter '\n      if [ \"$GIT_AUTHOR_NAME\" = \"Darl McBribe\" ];\n      then\n          skip_commit \"$@\";\n      else\n          git commit-tree \"$@\";\n      fi' HEAD\nbecomes\n  git filter-repo --commit-callback '\n      if commit.author_name == b\"Darl McBribe\":\n          commit.skip()\n      '\n\n\n\nRemoving git-svn-id: lines from commit messages via\n  git filter-branch --msg-filter '\n      sed -e \"/^git-svn-id:/d\"\n      '\nbecomes\n  git filter-repo --message-callback '\n      return re.sub(b\"^git-svn-id:.*\\n\", b\"\", message, flags=re.MULTILINE)\n      '\n\n\n\nAdding Acked-by lines to the last ten commits via\n  git filter-branch --msg-filter '\n          cat &&\n          echo \"Acked-by: Bugs Bunny &lt;bunny@bugzilla.org&gt;\"\n      ' master~10..master\nbecomes\n  git filter-repo --message-callback '\n          return message + b\"Acked-by: Bugs Bunny &lt;bunny@bugzilla.org&gt;\\n\"\n      ' --refs master~10..master\n\n\n\n  git filter-branch --env-filter '\n      if test \"$GIT_AUTHOR_EMAIL\" = \"root@localhost\"\n      then\n              GIT_AUTHOR_EMAIL=john@example.com\n      fi\n      if test \"$GIT_COMMITTER_EMAIL\" = \"root@localhost\"\n      then\n              GIT_COMMITTER_EMAIL=john@example.com\n      fi\n      ' -- --all\nbecomes either\n  # Ensure '&lt;john@example.com&gt; &lt;root@localhost&gt;' is a line in .mailmap, then:\n  git filter-repo --use-mailmap\nor\n  git filter-repo --email-callback '\n    return email if email != b\"root@localhost\" else b\"john@example.com\"\n    '\n(and as a bonus both filter-repo alternatives will fix tagger emails too, unlike the filter-branch example)\n\n\n\nThe partial examples\n  git filter-branch ... C..H\n  git filter-branch ... C..H ^D\n  git filter-branch ... D..H ^C\nbecome\n  git filter-repo ... --refs C..H\n  git filter-repo ... --refs C..H ^D\n  git filter-repo ... --refs D..H ^C\nNote that filter-branch accepts --not among the revision specifiers, but that appears to python to be a flag name which breaks parsing. So, instead of e.g. --not C as we might use with filter-branch, we can specify ^C to filter-repo."
  },
  {
    "objectID": "git-filter-repo/Documentation/converting-from-filter-branch.html#cheat-sheet-additional-conversion-examples",
    "href": "git-filter-repo/Documentation/converting-from-filter-branch.html#cheat-sheet-additional-conversion-examples",
    "title": "Cheat Sheet: Converting from filter-branch",
    "section": "",
    "text": "Running some program on a subset of files is relatively natural in filter-branch:\n  git filter-branch --tree-filter '\n      git ls-files -z \"*.c\" \\\n          | xargs -0 -n 1 clang-format -style=file -i\n      '\nfilter-repo decided not to provide a way to run an external program to do filtering, because most filter-branch uses of this ability are riddled with safety problems and performance issues. However, in special cases like this it’s fairly safe. One can write a script that uses filter-repo as a library to achieve this, while also gaining filter-repo’s automatic handling of other concerns like rewriting commit IDs in commit messages or pruning commits that become empty. In fact, one of the contrib demos, lint-history, handles this exact type of situation already:\n  lint-history --relevant 'return filename.endswith(b\".c\")' \\\n      clang-format -style=file -i"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n\n\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-launching-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-launching-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#graphing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#graphing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Warning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n\n\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Part 1: Interactive Data Visualization\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPart 2: Animated Statistical Graphics\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(col, as.factor)`.\nCaused by warning:\n! Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(col)\n\n  # Now:\n  data %&gt;% select(all_of(col))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7, :\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7):\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse,haven)\n\n##Importing PISA Data\nThe code chunk below uses ‘read_sas()’ of haven to import PISA data into the R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse,haven)\n\n##Importing PISA Data\nThe code chunk below uses ‘read_sas()’ of haven to import PISA data into the R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Creating Data Visualization Beyond Default",
    "section": "",
    "text": "Although Singapore has reportedly achieved a high level of education between all schools in the country, there remains a strong belief within the country that disparities still exist within the educational system. Differing factors such as being an elite or neighborhood school, socioeconomic status, gender, and many other factors may still play a vital role in a student’s educational quality."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#installing-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#installing-r-packages",
    "title": "Take-home Exercise 1: Creating Data Visualization Beyond Default",
    "section": "1.1: Installing R Packages",
    "text": "1.1: Installing R Packages\nIn this task, three R packages will be used. They are:\n\ntidyverse,\nhaven, and\nggplot2\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse,haven,ggplot2,patchwork,ggrepel,ggthemes,hrbrthemes)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-sets",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-sets",
    "title": "Take-home Exercise 1: Creating Data Visualization Beyond Default",
    "section": "1.2: Data Sets",
    "text": "1.2: Data Sets\nThe code chunk below uses ‘read_sas()’ of haven to import the PISA data into the R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nThe data can then be limited to contain only Singaporean students using the following code chunks.\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")\n\nGiven that the data was restricted to only Singaporean students, numerous columns have uniform values. These columns do not provide any useful information to the task at hand and can thus be filtered out using the code chunks below.\n\nlibrary(dplyr)\nstu_qqq_SG_filtered &lt;- stu_qqq_SG %&gt;%\n  select_if(function(x) !all(x == x[1]))\n\n\nwrite_rds(stu_qqq_SG_filtered,\n          \"data/stu_qqq_SG_filtered.rds\")\n\n\nstu_qqq_SG_filtered &lt;- read_rds(\"data/stu_qqq_SG_filtered.rds\")\n\nThis provides a data set called “stu_qqq_SG_filtered” which contains the information from PISA regarding Singaporean students and all answers wherein unique values were placed by said students.\n\n1.2.1: Data Wrangling\nThere are multiple Plausible Values (PV) provided for the subjects of Math, Reading and Science. The mean of the PVs can be used to obtain an estimate for the student’s performance in the respective subjects.\nThe code chunk below is used to obtain the means of the data:\n\nstu_qqq_SG_filtered &lt;- stu_qqq_SG_filtered %&gt;%\n  mutate(\n    MATH_Score = rowMeans(select(., PV1MATH:PV10MATH), na.rm = TRUE),\n    READ_Score = rowMeans(select(., PV1READ:PV10READ), na.rm = TRUE),\n    SCIE_Score = rowMeans(select(., PV1SCIE:PV10SCIE), na.rm = TRUE)\n  )\n\nObserving the question for gender, responses are written in the form of 1 (Female), and 2 (Male). A new column called “Gender” can be created which converts the numeric values to their respective text responses using the code chunk below:\n\nstu_qqq_SG_filtered &lt;- stu_qqq_SG_filtered %&gt;%\n  mutate(Gender = ifelse(ST004D01T == 1, \"Female\", \"Male\"))\n\nThe schools are currently seen as numbers, these must be converted into characters using the following code chunk:\n\nstu_qqq_SG_filtered &lt;- stu_qqq_SG_filtered %&gt;%\n  mutate(CNTSCHID = as.character(CNTSCHID))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary-statistics-of-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary-statistics-of-data",
    "title": "Take-home Exercise 1: Creating Data Visualization Beyond Default",
    "section": "1.2.1: Summary Statistics of Data",
    "text": "1.2.1: Summary Statistics of Data\nThe following code chunk checks if there is any duplicate data found within the data set.\n\nstu_qqq_SG_filtered[duplicated(stu_qqq_SG_filtered),]\n\n# A tibble: 0 × 639\n# ℹ 639 variables: CNTSCHID &lt;chr&gt;, CNTSTUID &lt;dbl&gt;, STRATUM &lt;chr&gt;, BOOKID &lt;dbl&gt;,\n#   ST001D01T &lt;dbl&gt;, ST003D02T &lt;dbl&gt;, ST004D01T &lt;dbl&gt;, ST250Q01JA &lt;dbl&gt;,\n#   ST250Q02JA &lt;dbl&gt;, ST250Q03JA &lt;dbl&gt;, ST250Q04JA &lt;dbl&gt;, ST250Q05JA &lt;dbl&gt;,\n#   ST250D06JA &lt;chr&gt;, ST250D07JA &lt;chr&gt;, ST251Q01JA &lt;dbl&gt;, ST251Q02JA &lt;dbl&gt;,\n#   ST251Q03JA &lt;dbl&gt;, ST251Q04JA &lt;dbl&gt;, ST251Q06JA &lt;dbl&gt;, ST251Q07JA &lt;dbl&gt;,\n#   ST253Q01JA &lt;dbl&gt;, ST254Q01JA &lt;dbl&gt;, ST254Q02JA &lt;dbl&gt;, ST254Q03JA &lt;dbl&gt;,\n#   ST254Q04JA &lt;dbl&gt;, ST254Q05JA &lt;dbl&gt;, ST254Q06JA &lt;dbl&gt;, ST255Q01JA &lt;dbl&gt;, …\n\n\n\nData Visualization\nBelow is an overview of the scores of the students from each subject area.\n\nMathReadingScience\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes (x = 1, y = MATH_Score))+\n  geom_boxplot(notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"maroon\", size=2)+\n  ggtitle(\"Math Scores\")+\n  theme_hc()+\n  coord_cartesian(ylim = c(100, 900))+\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes (x = 1, y = READ_Score))+\n  geom_boxplot(notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"maroon\", size=2)+\n  ggtitle(\"Reading Scores\")+\n  theme_hc()+\n  coord_cartesian(ylim = c(100, 900))+\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes (x = 1, y = SCIE_Score))+\n  geom_boxplot(notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"maroon\", size=2)+\n  ggtitle(\"Science Scores\")+\n  theme_hc()+\n  coord_cartesian(ylim = c(100, 900))+\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\nThe following graph shows the difference in scores per subject based on the student’s gender.\n\nMathReadingScience\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes (x = Gender, y = MATH_Score))+\n  geom_boxplot(notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"maroon\", size=2)+\n  ggtitle(\"Math Scores by Gender\")+\n  theme_hc()+\n  coord_cartesian(ylim = c(100, 900))+\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes (x = Gender, y = READ_Score))+\n  geom_boxplot(notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"maroon\", size=2)+\n  ggtitle(\"Reading Scores by Gender\")+\n  theme_hc()+\n  coord_cartesian(ylim = c(100, 900))+\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes (x = Gender, y = SCIE_Score))+\n  geom_boxplot(notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"maroon\", size=2)+\n  ggtitle(\"Science Scores by Gender\")+\n  theme_hc()+\n  coord_cartesian(ylim = c(100, 900))+\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\nThe following graph shows the range of the average score per subject per school.\n\nObtaining Average Scores per School per SubjectMathReadingScience\n\n\n\nGet_School &lt;- stu_qqq_SG_filtered\n\nBy_School &lt;- Get_School %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarize(\n    Avg_Math = mean(MATH_Score, na.rm = TRUE),\n    Avg_Read = mean(READ_Score, na.rm = TRUE),\n    Avg_Scie = mean(SCIE_Score, na.rm = TRUE)\n  )\n\n\n\n\n\nShow the code\nggplot(data = By_School,\n       aes(x = factor(1), y = Avg_Math)) +\n  geom_boxplot(notch = TRUE) +\n  stat_summary(geom = \"point\", fun.y = \"mean\", colour = \"maroon\", size = 2) +\n  ggtitle(\"Math Scores by School\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(300, 750)) +\n  scale_y_continuous(breaks = seq(300, 750, by = 50)) +\n  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = By_School,\n       aes(x = factor(1), y = Avg_Read)) +\n  geom_boxplot(notch = TRUE) +\n  stat_summary(geom = \"point\", fun.y = \"mean\", colour = \"maroon\", size = 2) +\n  ggtitle(\"Reading Scores by School\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(300, 750)) +\n  scale_y_continuous(breaks = seq(300, 750, by = 50)) +\n  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = By_School,\n       aes(x = factor(1), y = Avg_Scie)) +\n  geom_boxplot(notch = TRUE) +\n  stat_summary(geom = \"point\", fun.y = \"mean\", colour = \"maroon\", size = 2) +\n  ggtitle(\"Science Scores by School\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(300, 750)) +\n  scale_y_continuous(breaks = seq(300, 750, by = 50)) +\n  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\nThe final graph shows the difference in scores per subject based on the student’s food security.\n\nMathReadingScience\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x=ESCS,y=MATH_Score))+\n  geom_point()+\n  geom_smooth(method=lm,\n              size=0.5)+\n  ggtitle(\"Math Score by ESCS\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x=ESCS,y=READ_Score))+\n  geom_point()+\n  geom_smooth(method=lm,\n              size=0.5)+\n  ggtitle(\"Reading Score by ESCS\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x=ESCS,y=SCIE_Score))+\n  geom_point()+\n  geom_smooth(method=lm,\n              size=0.5)+\n  ggtitle(\"Science Score by ESCS\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.title.y = element_blank())"
  }
]